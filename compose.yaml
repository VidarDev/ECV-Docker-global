secrets:
  mysql_root_password:
    file: ./secrets/mysql_root_password.txt
  mysql_password:
    file: ./secrets/mysql_password.txt
  grafana_admin_password:
    file: ./secrets/grafana_admin_password.txt

services:
  # Application
  prestashop:
    image: prestashop/prestashop:latest
    container_name: prestashop
    restart: unless-stopped
    environment:
      PS_INSTALL_AUTO: 1
      PS_LANGUAGE: fr
      PS_COUNTRY: fr
      DB_SERVER: mysql
      DB_NAME: prestashop
      DB_USER: admin
      PS_DOMAIN: localhost:8080
      PS_ENABLE_SSL: 0
    secrets:
      - source: mysql_password
        target: DB_PASSWORD
    ports:
      - "8080:80"
    volumes:
      - prestashop-data:/var/www/html
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - frontend-network
      - backend-network
      - monitoring-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Base de données
  mysql:
    image: mysql:latest
    container_name: mysql
    user: "1000:1000"
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/mysql_root_password
      MYSQL_PASSWORD_FILE: /run/secrets/mysql_password
      MYSQL_DATABASE: prestashop
      MYSQL_USER: admin
    secrets:
      - mysql_root_password
      - mysql_password
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - backend-network
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "--password=$$(cat /run/secrets/mysql_root_password)",
        ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  phpmyadmin:
    image: phpmyadmin:latest
    container_name: phpmyadmin
    restart: unless-stopped
    ports:
      - "8081:80"
    environment:
      PMA_HOST: mysql
      PMA_USER: root
      PMA_PASSWORD_FILE: /run/secrets/mysql_root_password
      PMA_PMADB: phpmyadmin
    secrets:
      - mysql_root_password
    networks:
      - backend-network
      - frontend-network
    depends_on:
      mysql:
        condition: service_healthy
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./.docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./.docker/prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
    networks:
      - monitoring-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./.docker/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager-data:/alertmanager
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yml"
      - "--storage.path=/alertmanager"
    networks:
      - monitoring-network
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    user: "1000:1000"
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--path.rootfs=/rootfs"
      - "--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)"
    networks:
      - monitoring-network
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: unless-stopped
    privileged: true
    ports:
      - "8082:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - monitoring-network
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    user: "1000:1000"
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD__FILE: /run/secrets/grafana_admin_password
    secrets:
      - grafana_admin_password
    volumes:
      - grafana-data:/var/lib/grafana
      - ./.docker/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - monitoring-network
    depends_on:
      - prometheus
      - alertmanager
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Sauvegarde
  backup:
    build:
      context: ./.docker/backup
      dockerfile: Dockerfile
    container_name: mysql-backup
    restart: unless-stopped
    environment:
      TZ: Europe/Paris
    volumes:
      - mysql-data:/data/db:ro
      - backup-data:/backup
    secrets:
      - mysql_root_password
    networks:
      - backend-network
    depends_on:
      mysql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "ls", "-l", "/backup"]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 1m
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

networks:
  frontend-network:
    driver: bridge
  backend-network:
    driver: bridge
    internal: true # Réseau interne non exposé
  monitoring-network:
    driver: bridge

volumes:
  prestashop-data:
  mysql-data:
  grafana-data:
  backup-data:
  prometheus-data:
  alertmanager-data:
  nginx-logs:
